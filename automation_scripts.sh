#!/bin/bash

# =====================================================
# SCRIPTS DE AUTOMA√á√ÉO - VOTACOND√îMINOS
# =====================================================

# =====================================================
# 1. SETUP INICIAL DO PROJETO
# =====================================================

setup_project() {
  echo "üöÄ Configurando VotaCond√¥minos..."
  
  # Clonar reposit√≥rio
  git clone https://github.com/seu-usuario/vota-condominios.git
  cd vota-condominios
  
  # Instalar depend√™ncias
  npm install
  
  # Copiar env de exemplo
  cp .env.example .env.local
  
  echo "‚úÖ Projeto configurado!"
  echo "‚ö†Ô∏è  Configure as vari√°veis em .env.local antes de continuar"
}

# =====================================================
# 2. DEPLOY R√ÅPIDO
# =====================================================

deploy_production() {
  echo "üöÄ Deploy para produ√ß√£o..."
  
  # Verificar testes
  npm run test
  if [ $? -ne 0 ]; then
    echo "‚ùå Testes falharam. Deploy abortado."
    exit 1
  fi
  
  # Build local
  npm run build
  if [ $? -ne 0 ]; then
    echo "‚ùå Build falhou. Deploy abortado."
    exit 1
  fi
  
  # Deploy Vercel
  vercel --prod
  
  # Migrar banco
  supabase db push --linked
  
  echo "‚úÖ Deploy conclu√≠do!"
}

# =====================================================
# 3. BACKUP DO BANCO DE DADOS
# =====================================================

backup_database() {
  DATE=$(date +%Y%m%d_%H%M%S)
  BACKUP_FILE="backup_${DATE}.sql"
  
  echo "üíæ Criando backup do banco..."
  
  pg_dump \
    -h db.xxx.supabase.co \
    -U postgres \
    -d postgres \
    -F c \
    -f "backups/${BACKUP_FILE}"
  
  # Comprimir
  gzip "backups/${BACKUP_FILE}"
  
  # Upload para S3 (opcional)
  # aws s3 cp "backups/${BACKUP_FILE}.gz" s3://backups-vota/
  
  echo "‚úÖ Backup criado: ${BACKUP_FILE}.gz"
}

# =====================================================
# 4. RESTAURAR BACKUP
# =====================================================

restore_database() {
  BACKUP_FILE=$1
  
  if [ -z "$BACKUP_FILE" ]; then
    echo "‚ùå Especifique o arquivo de backup"
    echo "Uso: ./scripts.sh restore_database backups/backup.sql.gz"
    exit 1
  fi
  
  echo "‚ö†Ô∏è  ATEN√á√ÉO: Isso ir√° sobrescrever o banco atual!"
  read -p "Tem certeza? (yes/no): " confirm
  
  if [ "$confirm" != "yes" ]; then
    echo "Opera√ß√£o cancelada"
    exit 0
  fi
  
  # Descomprimir
  gunzip -c "$BACKUP_FILE" > temp_restore.sql
  
  # Restaurar
  psql \
    -h db.xxx.supabase.co \
    -U postgres \
    -d postgres \
    -f temp_restore.sql
  
  # Limpar
  rm temp_restore.sql
  
  echo "‚úÖ Banco restaurado!"
}

# =====================================================
# 5. CRIAR NOVO CONDOM√çNIO (VIA CLI)
# =====================================================

create_condominio() {
  echo "üè¢ Criar novo condom√≠nio"
  
  read -p "Nome do condom√≠nio: " nome
  read -p "CNPJ: " cnpj
  read -p "Cidade: " cidade
  read -p "Estado (UF): " estado
  read -p "Email do s√≠ndico: " email
  read -p "Plano (basico/premium/enterprise): " plano
  
  # Inserir no banco
  psql -h db.xxx.supabase.co -U postgres -d postgres <<EOF
BEGIN;

-- Criar condom√≠nio
INSERT INTO condominios (nome, cnpj, cidade, estado, plano, ativo)
VALUES ('$nome', '$cnpj', '$cidade', '$estado', '$plano', true)
RETURNING id;

-- Criar usu√°rio s√≠ndico (exemplo - ajustar conforme necess√°rio)
-- INSERT INTO usuarios (email, role, ...) VALUES (...);

COMMIT;
EOF
  
  echo "‚úÖ Condom√≠nio criado!"
}

# =====================================================
# 6. LIMPEZA DE DADOS ANTIGOS
# =====================================================

cleanup_old_data() {
  echo "üßπ Limpando dados antigos..."
  
  psql -h db.xxx.supabase.co -U postgres -d postgres <<EOF
-- Deletar vota√ß√µes antigas (>2 anos)
DELETE FROM votacoes 
WHERE data_fim < NOW() - INTERVAL '2 years';

-- Deletar logs antigos (>6 meses)
DELETE FROM logs_auditoria 
WHERE created_at < NOW() - INTERVAL '6 months';

-- Vacuum
VACUUM ANALYZE;

-- Relat√≥rio
SELECT 
  'votacoes' as tabela,
  COUNT(*) as registros
FROM votacoes
UNION ALL
SELECT 
  'logs_auditoria',
  COUNT(*)
FROM logs_auditoria;
EOF
  
  echo "‚úÖ Limpeza conclu√≠da!"
}

# =====================================================
# 7. MONITORAR SA√öDE DO SISTEMA
# =====================================================

health_check() {
  echo "üè• Verificando sa√∫de do sistema..."
  
  # Verificar API
  response=$(curl -s -o /dev/null -w "%{http_code}" https://seu-dominio.com/api/health)
  if [ "$response" = "200" ]; then
    echo "‚úÖ API funcionando"
  else
    echo "‚ùå API com problemas (HTTP $response)"
  fi
  
  # Verificar banco
  psql -h db.xxx.supabase.co -U postgres -d postgres -c "SELECT 1" > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    echo "‚úÖ Banco de dados funcionando"
  else
    echo "‚ùå Banco de dados com problemas"
  fi
  
  # Verificar Vercel
  vercel_status=$(curl -s https://www.vercel-status.com/api/v2/status.json | jq -r '.status.indicator')
  echo "üìä Status Vercel: $vercel_status"
  
  # M√©tricas do banco
  psql -h db.xxx.supabase.co -U postgres -d postgres <<EOF
SELECT 
  schemaname,
  tablename,
  pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) AS size
FROM pg_tables
WHERE schemaname = 'public'
ORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC
LIMIT 10;
EOF
}

# =====================================================
# 8. GERAR RELAT√ìRIO DE USO
# =====================================================

usage_report() {
  DATE=$(date +%Y-%m-%d)
  REPORT_FILE="relatorios/uso_${DATE}.txt"
  
  echo "üìä Gerando relat√≥rio de uso..."
  
  psql -h db.xxx.supabase.co -U postgres -d postgres > "$REPORT_FILE" <<EOF
-- Relat√≥rio de Uso - ${DATE}

-- Total de condom√≠nios ativos
SELECT 'Total de Condom√≠nios Ativos' as metrica, COUNT(*) as valor
FROM condominios WHERE ativo = true;

-- Total de moradores
SELECT 'Total de Moradores' as metrica, COUNT(*) as valor
FROM usuarios WHERE role = 'morador';

-- Vota√ß√µes criadas (√∫ltimo m√™s)
SELECT 'Vota√ß√µes (30 dias)' as metrica, COUNT(*) as valor
FROM votacoes 
WHERE created_at > NOW() - INTERVAL '30 days';

-- Taxa m√©dia de participa√ß√£o
SELECT 
  'Taxa M√©dia de Participa√ß√£o' as metrica,
  ROUND(AVG(
    (SELECT COUNT(*) FROM votos WHERE votacao_id = v.id)::decimal / 
    NULLIF((SELECT COUNT(*) FROM usuarios_condominios uc WHERE uc.condominio_id = v.condominio_id AND status = 'aprovado'), 0) * 100
  ), 2) as valor
FROM votacoes v
WHERE status = 'finalizada';

-- Top 5 condom√≠nios mais ativos
SELECT 
  c.nome,
  COUNT(v.id) as total_votacoes
FROM condominios c
LEFT JOIN votacoes v ON v.condominio_id = c.id
WHERE v.created_at > NOW() - INTERVAL '30 days'
GROUP BY c.id, c.nome
ORDER BY total_votacoes DESC
LIMIT 5;
EOF
  
  echo "‚úÖ Relat√≥rio gerado: $REPORT_FILE"
  cat "$REPORT_FILE"
}

# =====================================================
# 9. ENVIAR EMAIL DE TESTE
# =====================================================

test_email() {
  EMAIL=$1
  
  if [ -z "$EMAIL" ]; then
    read -p "Email de destino: " EMAIL
  fi
  
  echo "üìß Enviando email de teste para $EMAIL..."
  
  curl -X POST https://api.resend.com/emails \
    -H "Authorization: Bearer ${RESEND_API_KEY}" \
    -H "Content-Type: application/json" \
    -d "{
      \"from\": \"noreply@votacondominios.com\",
      \"to\": \"$EMAIL\",
      \"subject\": \"Teste de Email - VotaCond√¥minos\",
      \"html\": \"<h1>Email de Teste</h1><p>Se voc√™ recebeu este email, o sistema est√° funcionando corretamente!</p>\"
    }"
  
  echo ""
  echo "‚úÖ Email enviado! Verifique a caixa de entrada de $EMAIL"
}

# =====================================================
# 10. RESETAR SENHA DE USU√ÅRIO
# =====================================================

reset_user_password() {
  EMAIL=$1
  
  if [ -z "$EMAIL" ]; then
    read -p "Email do usu√°rio: " EMAIL
  fi
  
  echo "üîë Resetando senha para $EMAIL..."
  
  # Gerar token de reset
  psql -h db.xxx.supabase.co -U postgres -d postgres <<EOF
-- Buscar usu√°rio
SELECT id, email, nome_completo 
FROM usuarios 
WHERE email = '$EMAIL';

-- Gerar link de reset (ajustar conforme implementa√ß√£o)
-- UPDATE usuarios SET reset_token = gen_random_uuid() WHERE email = '$EMAIL';
EOF
  
  echo "‚úÖ Envie o link de reset para o usu√°rio"
}

# =====================================================
# 11. AN√ÅLISE DE PERFORMANCE
# =====================================================

performance_analysis() {
  echo "‚ö° An√°lise de Performance..."
  
  # Queries mais lentas
  echo "üìä Top 10 queries mais lentas:"
  psql -h db.xxx.supabase.co -U postgres -d postgres <<EOF
SELECT 
  LEFT(query, 60) as query_snippet,
  calls,
  ROUND(total_time::numeric, 2) as total_time_ms,
  ROUND(mean_time::numeric, 2) as mean_time_ms,
  ROUND((100 * total_time / SUM(total_time) OVER ())::numeric, 2) AS percentage
FROM pg_stat_statements
ORDER BY total_time DESC
LIMIT 10;
EOF

  # Tamanho das tabelas
  echo ""
  echo "üíæ Tamanho das tabelas:"
  psql -h db.xxx.supabase.co -U postgres -d postgres <<EOF
SELECT 
  tablename,
  pg_size_pretty(pg_total_relation_size('public.'||tablename)) as size,
  pg_total_relation_size('public.'||tablename) as size_bytes
FROM pg_tables
WHERE schemaname = 'public'
ORDER BY size_bytes DESC
LIMIT 10;
EOF

  # √çndices n√£o utilizados
  echo ""
  echo "üîç √çndices subutilizados:"
  psql -h db.xxx.supabase.co -U postgres -d postgres <<EOF
SELECT 
  schemaname,
  tablename,
  indexname,
  idx_scan,
  pg_size_pretty(pg_relation_size(indexrelid)) as index_size
FROM pg_stat_user_indexes
WHERE idx_scan < 10
  AND schemaname = 'public'
ORDER BY pg_relation_size(indexrelid) DESC;
EOF
}

# =====================================================
# 12. VERIFICAR SEGURAN√áA
# =====================================================

security_audit() {
  echo "üîí Auditoria de Seguran√ßa..."
  
  # Verificar RLS ativado
  echo "Verificando Row Level Security:"
  psql -h db.xxx.supabase.co -U postgres -d postgres <<EOF
SELECT 
  schemaname,
  tablename,
  rowsecurity
FROM pg_tables
WHERE schemaname = 'public'
  AND tablename IN ('votacoes', 'votos', 'usuarios', 'condominios')
ORDER BY tablename;
EOF

  # Listar pol√≠ticas RLS
  echo ""
  echo "Pol√≠ticas RLS ativas:"
  psql -h db.xxx.supabase.co -U postgres -d postgres <<EOF
SELECT 
  schemaname,
  tablename,
  policyname,
  permissive,
  roles,
  cmd
FROM pg_policies
WHERE schemaname = 'public'
ORDER BY tablename, policyname;
EOF

  # Verificar usu√°rios com privil√©gios elevados
  echo ""
  echo "Usu√°rios administradores:"
  psql -h db.xxx.supabase.co -U postgres -d postgres <<EOF
SELECT 
  email,
  role,
  ativo,
  email_verificado,
  created_at
FROM usuarios
WHERE role IN ('super_admin', 'admin')
ORDER BY created_at;
EOF
}

# =====================================================
# 13. POPULAR DADOS DE DEMONSTRA√á√ÉO
# =====================================================

seed_demo_data() {
  echo "üå± Populando dados de demonstra√ß√£o..."
  
  psql -h db.xxx.supabase.co -U postgres -d postgres <<EOF
BEGIN;

-- Criar condom√≠nio demo
INSERT INTO condominios (nome, cnpj, cidade, estado, ativo)
VALUES ('Condom√≠nio Demo', '00.000.000/0001-00', 'S√£o Paulo', 'SP', true)
ON CONFLICT DO NOTHING
RETURNING id;

-- Criar unidades
INSERT INTO unidades (condominio_id, identificador, bloco, andar)
SELECT 
  (SELECT id FROM condominios WHERE nome = 'Condom√≠nio Demo'),
  'Apto ' || num,
  CASE WHEN num <= 110 THEN 'A' ELSE 'B' END,
  ((num - 100) / 4) + 1
FROM generate_series(101, 120) num
ON CONFLICT DO NOTHING;

-- Criar s√≠ndico demo
INSERT INTO usuarios (email, senha_hash, nome_completo, cpf, role, ativo, email_verificado)
VALUES (
  'sindico.demo@votacondominios.com',
  crypt('demo123', gen_salt('bf')),
  'Jo√£o Silva - S√≠ndico Demo',
  '123.456.789-00',
  'sindico',
  true,
  true
)
ON CONFLICT DO NOTHING;

-- Criar moradores demo
INSERT INTO usuarios (email, senha_hash, nome_completo, cpf, role, ativo, email_verificado)
SELECT 
  'morador' || num || '@demo.com',
  crypt('demo123', gen_salt('bf')),
  'Morador Demo ' || num,
  LPAD(num::text, 11, '0'),
  'morador',
  true,
  true
FROM generate_series(1, 10) num
ON CONFLICT DO NOTHING;

-- Associar moradores ao condom√≠nio
INSERT INTO usuarios_condominios (usuario_id, condominio_id, unidade_id, status)
SELECT 
  u.id,
  (SELECT id FROM condominios WHERE nome = 'Condom√≠nio Demo'),
  (SELECT id FROM unidades WHERE identificador = 'Apto ' || (100 + row_number) LIMIT 1),
  'aprovado'
FROM (
  SELECT id, ROW_NUMBER() OVER () as row_number
  FROM usuarios 
  WHERE email LIKE '%@demo.com'
  LIMIT 10
) u
ON CONFLICT DO NOTHING;

-- Criar vota√ß√£o demo
INSERT INTO votacoes (
  condominio_id,
  criado_por,
  titulo,
  descricao,
  tipo,
  quorum_minimo,
  data_inicio,
  data_fim,
  status
)
VALUES (
  (SELECT id FROM condominios WHERE nome = 'Condom√≠nio Demo'),
  (SELECT id FROM usuarios WHERE email = 'sindico.demo@votacondominios.com'),
  'Vota√ß√£o de Demonstra√ß√£o',
  'Esta √© uma vota√ß√£o de exemplo para testar o sistema.',
  'simples',
  50,
  NOW(),
  NOW() + INTERVAL '7 days',
  'aberta'
)
ON CONFLICT DO NOTHING;

COMMIT;
EOF
  
  echo "‚úÖ Dados de demonstra√ß√£o criados!"
  echo ""
  echo "üìß Credenciais de acesso:"
  echo "S√≠ndico: sindico.demo@votacondominios.com / demo123"
  echo "Moradores: morador1@demo.com at√© morador10@demo.com / demo123"
}

# =====================================================
# 14. LIMPAR DADOS DE DEMONSTRA√á√ÉO
# =====================================================

clean_demo_data() {
  echo "üßπ Removendo dados de demonstra√ß√£o..."
  
  read -p "Tem certeza? (yes/no): " confirm
  if [ "$confirm" != "yes" ]; then
    echo "Opera√ß√£o cancelada"
    exit 0
  fi
  
  psql -h db.xxx.supabase.co -U postgres -d postgres <<EOF
DELETE FROM condominios WHERE nome = 'Condom√≠nio Demo';
DELETE FROM usuarios WHERE email LIKE '%@demo.com' OR email = 'sindico.demo@votacondominios.com';
EOF
  
  echo "‚úÖ Dados de demonstra√ß√£o removidos!"
}

# =====================================================
# 15. EXPORTAR DADOS PARA CSV
# =====================================================

export_to_csv() {
  DATE=$(date +%Y%m%d)
  EXPORT_DIR="exports/${DATE}"
  
  echo "üìä Exportando dados para CSV..."
  mkdir -p "$EXPORT_DIR"
  
  # Exportar condom√≠nios
  psql -h db.xxx.supabase.co -U postgres -d postgres \
    -c "COPY (SELECT * FROM condominios) TO STDOUT CSV HEADER" \
    > "${EXPORT_DIR}/condominios.csv"
  
  # Exportar vota√ß√µes
  psql -h db.xxx.supabase.co -U postgres -d postgres \
    -c "COPY (SELECT * FROM votacoes) TO STDOUT CSV HEADER" \
    > "${EXPORT_DIR}/votacoes.csv"
  
  # Exportar usu√°rios (sem senhas)
  psql -h db.xxx.supabase.co -U postgres -d postgres \
    -c "COPY (SELECT id, email, nome_completo, role, ativo FROM usuarios) TO STDOUT CSV HEADER" \
    > "${EXPORT_DIR}/usuarios.csv"
  
  echo "‚úÖ Dados exportados para: $EXPORT_DIR"
  ls -lh "$EXPORT_DIR"
}

# =====================================================
# 16. TESTE DE CARGA (STRESS TEST)
# =====================================================

load_test() {
  URL=${1:-"http://localhost:3000"}
  REQUESTS=${2:-100}
  CONCURRENCY=${3:-10}
  
  echo "‚ö° Teste de carga..."
  echo "URL: $URL"
  echo "Requisi√ß√µes: $REQUESTS"
  echo "Concorr√™ncia: $CONCURRENCY"
  
  # Usar Apache Bench (instalar se necess√°rio)
  ab -n $REQUESTS -c $CONCURRENCY "$URL/" > load_test_results.txt
  
  echo ""
  echo "Resultados:"
  grep "Requests per second" load_test_results.txt
  grep "Time per request" load_test_results.txt
  grep "Failed requests" load_test_results.txt
}

# =====================================================
# 17. ATUALIZAR DEPEND√äNCIAS
# =====================================================

update_dependencies() {
  echo "üì¶ Atualizando depend√™ncias..."
  
  # Backup package.json
  cp package.json package.json.backup
  
  # Verificar updates
  npm outdated
  
  read -p "Atualizar todos os patches? (yes/no): " confirm
  if [ "$confirm" = "yes" ]; then
    npm update
  fi
  
  read -p "Atualizar majors tamb√©m? (yes/no): " confirm_major
  if [ "$confirm_major" = "yes" ]; then
    npm install next@latest react@latest react-dom@latest
  fi
  
  # Testar
  npm run build
  if [ $? -ne 0 ]; then
    echo "‚ùå Build falhou! Restaurando package.json anterior..."
    cp package.json.backup package.json
    npm install
    exit 1
  fi
  
  echo "‚úÖ Depend√™ncias atualizadas com sucesso!"
}

# =====================================================
# 18. VERIFICAR CONFORMIDADE LGPD
# =====================================================

lgpd_compliance_check() {
  echo "üìú Verificando conformidade LGPD..."
  
  # Verificar dados sens√≠veis
  psql -h db.xxx.supabase.co -U postgres -d postgres <<EOF
-- Verificar criptografia de senhas
SELECT 
  'Senhas criptografadas' as verificacao,
  CASE WHEN senha_hash LIKE 'crypt%' OR senha_hash LIKE '\$2%'
    THEN '‚úÖ OK'
    ELSE '‚ùå FALHA'
  END as status
FROM usuarios
LIMIT 1;

-- CPFs armazenados
SELECT 
  'Total de CPFs cadastrados' as info,
  COUNT(*) as quantidade
FROM usuarios
WHERE cpf IS NOT NULL;

-- Logs de acesso (√∫ltimos 90 dias)
SELECT 
  'Logs dos √∫ltimos 90 dias' as info,
  COUNT(*) as quantidade
FROM logs_auditoria
WHERE created_at > NOW() - INTERVAL '90 days';
EOF

  echo ""
  echo "üìã Checklist LGPD:"
  echo "[ ] Pol√≠tica de privacidade publicada"
  echo "[ ] Termos de uso aceitos por usu√°rios"
  echo "[ ] Consentimento para uso de dados"
  echo "[ ] Processo de exclus√£o de dados implementado"
  echo "[ ] Logs de acesso mantidos por per√≠odo adequado"
  echo "[ ] Criptografia de dados sens√≠veis"
  echo "[ ] Backup com reten√ß√£o definida"
}

# =====================================================
# MENU PRINCIPAL
# =====================================================

show_menu() {
  echo ""
  echo "üó≥Ô∏è  VotaCond√¥minos - Scripts de Automa√ß√£o"
  echo "=========================================="
  echo "1)  Setup inicial do projeto"
  echo "2)  Deploy para produ√ß√£o"
  echo "3)  Backup do banco de dados"
  echo "4)  Restaurar backup"
  echo "5)  Criar novo condom√≠nio"
  echo "6)  Limpeza de dados antigos"
  echo "7)  Health check do sistema"
  echo "8)  Gerar relat√≥rio de uso"
  echo "9)  Enviar email de teste"
  echo "10) Resetar senha de usu√°rio"
  echo "11) An√°lise de performance"
  echo "12) Auditoria de seguran√ßa"
  echo "13) Popular dados de demonstra√ß√£o"
  echo "14) Limpar dados de demonstra√ß√£o"
  echo "15) Exportar dados para CSV"
  echo "16) Teste de carga"
  echo "17) Atualizar depend√™ncias"
  echo "18) Verificar conformidade LGPD"
  echo "0)  Sair"
  echo ""
}

# =====================================================
# EXECU√á√ÉO
# =====================================================

if [ "$1" != "" ]; then
  # Executar fun√ß√£o diretamente
  $@
else
  # Menu interativo
  while true; do
    show_menu
    read -p "Escolha uma op√ß√£o: " option
    
    case $option in
      1) setup_project ;;
      2) deploy_production ;;
      3) backup_database ;;
      4) 
        read -p "Caminho do arquivo de backup: " backup_file
        restore_database "$backup_file"
        ;;
      5) create_condominio ;;
      6) cleanup_old_data ;;
      7) health_check ;;
      8) usage_report ;;
      9) 
        read -p "Email de destino: " email
        test_email "$email"
        ;;
      10)
        read -p "Email do usu√°rio: " email
        reset_user_password "$email"
        ;;
      11) performance_analysis ;;
      12) security_audit ;;
      13) seed_demo_data ;;
      14) clean_demo_data ;;
      15) export_to_csv ;;
      16)
        read -p "URL (default: http://localhost:3000): " url
        read -p "N√∫mero de requisi√ß√µes (default: 100): " requests
        read -p "Concorr√™ncia (default: 10): " concurrency
        load_test "${url:-http://localhost:3000}" "${requests:-100}" "${concurrency:-10}"
        ;;
      17) update_dependencies ;;
      18) lgpd_compliance_check ;;
      0) 
        echo "üëã At√© logo!"
        exit 0
        ;;
      *)
        echo "‚ùå Op√ß√£o inv√°lida"
        ;;
    esac
    
    echo ""
    read -p "Pressione ENTER para continuar..."
  done
fi

# =====================================================
# COMO USAR
# =====================================================

# Dar permiss√£o de execu√ß√£o:
# chmod +x scripts.sh

# Executar menu interativo:
# ./scripts.sh

# Executar fun√ß√£o espec√≠fica:
# ./scripts.sh backup_database
# ./scripts.sh deploy_production
# ./scripts.sh health_check

# Agendar backup di√°rio (crontab):
# 0 2 * * * /caminho/para/scripts.sh backup_database

# Monitoramento cont√≠nuo:
# watch -n 300 /caminho/para/scripts.sh health_check